{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { setCredentials } from '../../../features/auth/authSlice';\nconst baseQuery = fetchBaseQuery({\n  baseUrl: 'http://localhost:3500',\n  credentials: 'include',\n  prepareHeaders: (headers, {\n    getState\n  }) => {\n    const token = getState().auth.token;\n    if (token) {\n      headers.set(\"authorization\", `Bearer ${token}`);\n    }\n    return headers;\n  }\n});\n\n// const baseQueryWithReauth = async (args, api, extraOptions) => {\n//     // console.log(args) // request url, method, body\n//     // console.log(api) // signal, dispatch, getState()\n//     // console.log(extraOptions) //custom like {shout: true}\n\n//     let result = await baseQuery(args, api, extraOptions)\n\n//     // If you want, handle other status codes, too\n//     if (result?.error?.status === 403) {\n//         console.log('sending refresh token')\n\n//         // send refresh token to get new access token\n//         const refreshResult = await baseQuery('/auth/refresh', api, extraOptions)\n\n//         if (refreshResult?.data) {\n\n//             // store the new token\n//             api.dispatch(setCredentials({ ...refreshResult.data }))\n\n//             // retry original query with new access token\n//             result = await baseQuery(args, api, extraOptions)\n//         } else {\n\n//             if (refreshResult?.error?.status === 403) {\n//                 refreshResult.error.data.message = \"Your login has expired. \"\n//             }\n//             return refreshResult\n//         }\n//     }\n\n//     return result\n// }\n\nexport const apiSlice = createApi({\n  baseQuery,\n  tagTypes: ['Note', 'User'],\n  endpoints: builder => ({})\n});","map":{"version":3,"names":["createApi","fetchBaseQuery","setCredentials","baseQuery","baseUrl","credentials","prepareHeaders","headers","getState","token","auth","set","apiSlice","tagTypes","endpoints","builder"],"sources":["/Users/brandonwu/Documents/BerkeleyStuff/MERN/frontend/src/app/api/apiSlice.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { setCredentials } from '../../../features/auth/authSlice'\n\nconst baseQuery = fetchBaseQuery({\n    baseUrl: 'http://localhost:3500',\n    credentials: 'include',\n    prepareHeaders: (headers, { getState }) => {\n        const token = getState().auth.token\n\n        if (token) {\n            headers.set(\"authorization\", `Bearer ${token}`)\n        }\n        return headers\n    }\n})\n\n// const baseQueryWithReauth = async (args, api, extraOptions) => {\n//     // console.log(args) // request url, method, body\n//     // console.log(api) // signal, dispatch, getState()\n//     // console.log(extraOptions) //custom like {shout: true}\n\n//     let result = await baseQuery(args, api, extraOptions)\n\n//     // If you want, handle other status codes, too\n//     if (result?.error?.status === 403) {\n//         console.log('sending refresh token')\n\n//         // send refresh token to get new access token\n//         const refreshResult = await baseQuery('/auth/refresh', api, extraOptions)\n\n//         if (refreshResult?.data) {\n\n//             // store the new token\n//             api.dispatch(setCredentials({ ...refreshResult.data }))\n\n//             // retry original query with new access token\n//             result = await baseQuery(args, api, extraOptions)\n//         } else {\n\n//             if (refreshResult?.error?.status === 403) {\n//                 refreshResult.error.data.message = \"Your login has expired. \"\n//             }\n//             return refreshResult\n//         }\n//     }\n\n//     return result\n// }\n\nexport const apiSlice = createApi({\n    baseQuery,\n    tagTypes: ['Note', 'User'],\n    endpoints: builder => ({})\n})"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AACxE,SAASC,cAAc,QAAQ,kCAAkC;AAEjE,MAAMC,SAAS,GAAGF,cAAc,CAAC;EAC7BG,OAAO,EAAE,uBAAuB;EAChCC,WAAW,EAAE,SAAS;EACtBC,cAAc,EAAEA,CAACC,OAAO,EAAE;IAAEC;EAAS,CAAC,KAAK;IACvC,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACD,KAAK;IAEnC,IAAIA,KAAK,EAAE;MACPF,OAAO,CAACI,GAAG,CAAC,eAAe,EAAG,UAASF,KAAM,EAAC,CAAC;IACnD;IACA,OAAOF,OAAO;EAClB;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,OAAO,MAAMK,QAAQ,GAAGZ,SAAS,CAAC;EAC9BG,SAAS;EACTU,QAAQ,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EAC1BC,SAAS,EAAEC,OAAO,KAAK,CAAC,CAAC;AAC7B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}